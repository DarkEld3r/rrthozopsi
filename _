diff --git a/src/game/mod.rs b/src/game/mod.rs
index 726e98c..6a5ce10 100644
--- a/src/game/mod.rs
+++ b/src/game/mod.rs
@@ -2,7 +2,7 @@ extern crate find_folder;
 
 use screen::{self, Screen};
 
-use piston_window::{self, PistonWindow, EventLoop};
+use piston_window::{self, PistonWindow};
 
 type Screens = Vec<Box<screen::Screen>>;
 
@@ -32,7 +32,7 @@ impl Game {
         use piston_window::Event;
 
         let screens = &mut self.screens;
-/*
+
         // TODO: Remove clone?
         for window in &mut self.window {
             match window.event {
@@ -52,14 +52,6 @@ impl Game {
                 _ => {}
             }
         }
-*/
-        for event in self.window.clone().ups(60) {
-            handle_event(screens, &event, &mut self.context);
-            if screens.is_empty() {
-                // No screens - exit game.
-                return;
-            }
-        }
     }
 }
 
@@ -82,18 +74,3 @@ fn handle_input(screens: &mut Screens,
         }
     }
 }
-
-fn handle_event(screens: &mut Screens,
-                window: &PistonWindow,
-                context: &mut screen::Context) {
-    for action in last(screens).on_event(&window, context) {
-        match action {
-            screen::InputResult::PushScreen(new_screen) => {
-                screens.push(new_screen);
-            }
-            screen::InputResult::PopScreen => {
-                screens.pop();
-            }
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/screen/battle.rs b/src/screen/battle.rs
index 6264086..aa336d9 100644
--- a/src/screen/battle.rs
+++ b/src/screen/battle.rs
@@ -106,8 +106,4 @@ impl Screen for Battle {
             self.player.mov(150.0 * args.dt, 0.0);
         }
     }
-
-    fn on_event(&mut self, window: &PistonWindow, context: &mut Context) -> InputResults {
-        Vec::new()
-    }
 }
diff --git a/src/screen/main_menu.rs b/src/screen/main_menu.rs
index c9503ff..b53f2fa 100644
--- a/src/screen/main_menu.rs
+++ b/src/screen/main_menu.rs
@@ -1,6 +1,6 @@
 use screen::*;
 use ui_utils;
-use piston_window::{self, PistonWindow, UpdateEvent};
+use piston_window::{self, PistonWindow};
 use conrod::{self, Widget, Positionable, Sizeable, Labelable};
 use conrod::color::Colorable;
 
@@ -90,73 +90,6 @@ impl Screen for MainMenu {
                 .set(EXIT_BUTTON, ui);
         });
     }
-
-    fn on_event(&mut self, window: &PistonWindow, context: &mut Context) -> InputResults {
-        self.ui.handle_event(window);
-
-        window.update(|_| {
-            let state = &mut self.state;
-            let button_color = conrod::color::rgb(0.4, 0.75, 0.6);
-            
-            self.ui.set_widgets(|ui| {
-                conrod::Canvas::new()
-                    .pad(30.)
-                    .color(conrod::color::rgb(0.2, 0.35, 0.45))
-                    .scroll_kids()
-                    .set(CANVAS, ui);
-
-                conrod::Button::new()
-                    .w_h(200.0, 50.0)
-                    .mid_left_of(CANVAS)
-                    .color(button_color)
-                    .label("New game")
-                    .react(|| *state = Some(State::NewGame))
-                    .set(NEW_GAME_BUTTON, ui);
-            
-                conrod::Button::new()
-                    .w_h(200.0, 50.0)
-                    .mid_left_of(CANVAS)
-                    .down_from(NEW_GAME_BUTTON, 45.0)
-                    .color(button_color)
-                    .label("Options")
-                    .react(|| *state = Some(State::Options))
-                    .set(OPTIONS_BUTTON, ui);
-            
-                conrod::Button::new()
-                    .w_h(200.0, 50.0)
-                    .mid_left_of(CANVAS)
-                    .down_from(OPTIONS_BUTTON, 45.0)
-                    .color(button_color)
-                    .label("Exit")
-                    .react(|| *state = Some(State::Exit))
-                    .set(EXIT_BUTTON, ui);
-            });
-
-        });
-
-        window.draw_2d(|context, graphics| self.ui.draw_if_changed(context, graphics));
-
-
-
-        let mut result = Vec::new();
-
-        match self.state {
-            Some(State::NewGame) => {
-                result.push(InputResult::PopScreen);
-                result.push(InputResult::PushScreen(Box::new(Battle::new(&window, context))));
-            }
-            Some(State::Options) => {
-                result.push(InputResult::PushScreen(Box::new(Options::new(&window, context))));
-            }
-            Some(State::Exit) => {
-                result.push(InputResult::PopScreen);
-            }
-            None => {}
-        }
-        self.state = None;
-
-        result
-    }
 }
 
 widget_ids! {
diff --git a/src/screen/options.rs b/src/screen/options.rs
index 74c0570..5ccc80a 100644
--- a/src/screen/options.rs
+++ b/src/screen/options.rs
@@ -1,6 +1,6 @@
 use screen::*;
 use ui_utils;
-use piston_window::{self, PistonWindow, UpdateEvent};
+use piston_window::{self, PistonWindow};
 use conrod::{self, Widget, Positionable, Sizeable, Labelable};
 use conrod::color::Colorable;
 
@@ -56,45 +56,6 @@ impl Screen for Options {
                 .set(BACK_BUTTON, ui);
         });
     }
-
-    fn on_event(&mut self, window: &PistonWindow, context: &mut Context) -> InputResults {
-        self.ui.handle_event(window);
-
-        window.update(|_| {
-            let button_color = conrod::color::rgb(0.4, 0.75, 0.6);
-            let back = &mut self.back;
-            
-            self.ui.set_widgets(|ui| {
-                conrod::Canvas::new()
-                    .pad(30.)
-                    .color(conrod::color::rgb(0.2, 0.35, 0.45))
-                    .scroll_kids()
-                    .set(CANVAS, ui);
-
-                conrod::Button::new()
-                    .w_h(200.0, 50.0)
-                    .mid_left_of(CANVAS)
-                    .color(button_color)
-                    .label("Back")
-                    .react(|| *back = true)
-                    .set(BACK_BUTTON, ui);
-            });
-
-        });
-
-        window.draw_2d(|context, graphics| self.ui.draw_if_changed(context, graphics));
-
-
-
-        let mut result = Vec::new();
-
-        if self.back {
-            result.push(InputResult::PopScreen);
-        }
-
-        result
-    }
-
 }
 
 widget_ids! {
diff --git a/src/screen/screen.rs b/src/screen/screen.rs
index 879c3d5..8e2863a 100644
--- a/src/screen/screen.rs
+++ b/src/screen/screen.rs
@@ -15,6 +15,4 @@ pub trait Screen {
     fn on_input(&mut self, input: &piston_window::Input, window: &PistonWindow, context: &mut Context) -> InputResults;
     fn on_draw(&mut self, args: &piston_window::RenderArgs, window: &PistonWindow);
     fn on_update(&mut self, args: &piston_window::UpdateArgs);
-
-    fn on_event(&mut self, window: &PistonWindow, context: &mut Context) -> InputResults;
 }
